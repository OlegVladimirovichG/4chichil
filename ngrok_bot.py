import asyncio
import logging
from datetime import datetime, time
import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
import aiohttp
import random
import os
import json

from config import BOT_TOKEN, MORNING_TIME
from monkey_photos import MONKEY_PHOTOS, LOCAL_PHOTOS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BotStates(StatesGroup):
    waiting_for_first_answer = State()
    waiting_for_second_answer = State()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ID —á–∞—Ç–∞
CHAT_ID = None

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_yes_no_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
        ]
    ])
    return keyboard

def get_confirm_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, —É–≤–µ—Ä–µ–Ω!", callback_data="confirm"),
            InlineKeyboardButton(text="–ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="no_confirm")
        ]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã
def get_random_monkey_photo():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã"""
    return random.choice(MONKEY_PHOTOS)

async def send_monkey_photo(chat_id: int, caption: str = "üñï –û–±–µ–∑—å—è–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–∫!"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã –≤ —á–∞—Ç"""
    try:
        photo_url = get_random_monkey_photo()
        logger.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {photo_url}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ URL
        await bot.send_photo(chat_id, photo_url, caption=caption)
        logger.info("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        await bot.send_message(chat_id, f"üñï {caption}\n\n–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –æ–±–µ–∑—å—è–Ω–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–∫!")

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global CHAT_ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    CHAT_ID = message.chat.id
    
    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer("–î–µ–Ω–∏—Å, —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–µ—è—Ç—å—Å—è? üòè", reply_markup=get_yes_no_keyboard())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    await state.set_state(BotStates.waiting_for_first_answer)

@dp.callback_query(StateFilter(BotStates.waiting_for_first_answer))
async def handle_first_answer_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()
    
    if callback.data == "yes":
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç "–¥–∞", –∑–∞–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
        await callback.message.answer("–¢—ã —É–≤–µ—Ä–µ–Ω? ü§î", reply_markup=get_confirm_keyboard())
        await state.set_state(BotStates.waiting_for_second_answer)
    else:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç "–Ω–µ—Ç", —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await callback.message.answer("–ù—É –ª–∞–¥–Ω–æ, —Ç–æ–≥–¥–∞ –≤–æ—Ç —Ç–µ–±–µ —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã! üñï")
        await send_monkey_photo(callback.message.chat.id)
        await state.clear()

@dp.callback_query(StateFilter(BotStates.waiting_for_second_answer))
async def handle_second_answer_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()
    
    # –õ—é–±–æ–π –æ—Ç–≤–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –≤–æ—Ç —Ç–µ–±–µ —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã! üñï")
    await send_monkey_photo(callback.message.chat.id)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@dp.message(StateFilter(BotStates.waiting_for_first_answer))
async def handle_first_answer_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    text = message.text.lower().strip()
    
    if text in ['–¥–∞', 'yes', 'y', '–¥', '–∞–≥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '—Ö–æ—á—É']:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç "–¥–∞", –∑–∞–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
        await message.answer("–¢—ã —É–≤–µ—Ä–µ–Ω? ü§î", reply_markup=get_confirm_keyboard())
        await state.set_state(BotStates.waiting_for_second_answer)
    else:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç "–Ω–µ—Ç" –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await message.answer("–ù—É –ª–∞–¥–Ω–æ, —Ç–æ–≥–¥–∞ –≤–æ—Ç —Ç–µ–±–µ —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã! üñï")
        await send_monkey_photo(message.chat.id)
        await state.clear()

@dp.message(StateFilter(BotStates.waiting_for_second_answer))
async def handle_second_answer_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º"""
    text = message.text.lower().strip()
    
    # –õ—é–±–æ–π –æ—Ç–≤–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –≤–æ—Ç —Ç–µ–±–µ —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã! üñï")
    await send_monkey_photo(message.chat.id)
    await state.clear()

@dp.message(Command("monkey"))
async def cmd_monkey(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"""
    await send_monkey_photo(message.chat.id, "üñï –í–æ—Ç —Ç–µ–±–µ –æ–±–µ–∑—å—è–Ω–∞ —Å —Ñ–∞–∫–æ–º!")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üñï –ë–æ—Ç –æ–±–µ–∑—å—è–Ω —Å —Ñ–∞–∫–æ–º!

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
/monkey - –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:00 –ø–æ –ú–°–ö! üïó
    """
    await message.answer(help_text)

async def send_morning_photo():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ —Ñ–æ—Ç–æ –æ–±–µ–∑—å—è–Ω—ã"""
    global CHAT_ID
    if CHAT_ID:
        try:
            await send_monkey_photo(CHAT_ID, "üñï –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –û–±–µ–∑—å—è–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–∫! üåÖ")
            logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {CHAT_ID}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ñ–æ—Ç–æ: {e}")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        update = types.Update(**await request.json())
        await dp.feed_update(bot, update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return web.Response(status=500)

async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ–æ—Ç–æ
    asyncio.create_task(schedule_morning_photo())

async def on_shutdown(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await bot.session.close()

async def schedule_morning_photo():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:00 –ú–°–ö"""
    msk_tz = pytz.timezone('Europe/Moscow')
    
    while True:
        try:
            now = datetime.now(msk_tz)
            target_time = now.replace(hour=8, minute=0, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 8:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now.time() >= time(8, 0):
                target_time = target_time.replace(day=target_time.day + 1)
            
            # –ñ–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            seconds_until_target = (target_time - now).total_seconds()
            await asyncio.sleep(seconds_until_target)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await send_morning_photo()
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()
app.router.add_post('/webhook', webhook_handler)
app.router.add_get('/', lambda r: web.Response(text="üñï –ë–æ—Ç –æ–±–µ–∑—å—è–Ω —Å —Ñ–∞–∫–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ ngrok!"))

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == '__main__':
    web.run_app(app, host='0.0.0.0', port=8000)

